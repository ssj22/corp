var myApp = angular.module('myApp', ["ngRoute", "ngGrid", "ngQuickDate"]);

myApp.controller("MaterialsCtrl", function($scope, $http) {
    $scope.times = [{name:'Today', val: '1'},{name:'Week', val: '7'}, {name:'Month', val: '30'}, {name:"Year", val: '365'}];
    $scope.sel = $scope.times[0];
    $scope.disabled = true;
    $scope.selectedRow = [];
    $scope.myData = [];
    $scope.readOnly = true;
    $scope.editMode = false;
    $scope.names = ["john", "bill", "charlie", "robert", "alban", "oscar", "marie", "celine", "brad", "drew", "rebecca", "michel", "francis", "jean", "paul", "pierre", "nicolas", "alfred", "gerard", "louis", "albert", "edouard", "benoit", "guillaume", "nicolas", "joseph"];

    $scope.vendors = [{"vendorId":10,"name":"New York"},{"vendorId":11,"name":"Los Angeles"},{"vendorId":12,"name":"Pune"},{"vendorId":13,"name":"Mumbai"}];

    $scope.editEntry = function() {
        //console.log("selectedRow = " + $scope.selectedRow[0].challanNo);
        $scope.selection = $scope.selectedRow[0];
        $scope.readOnly = false;
        $scope.editMode = true;
    }

    $scope.createEntry = function() {
        //console.log($scope.sel.val);
        $scope.selection = null;
        $scope.readOnly = false;
        $scope.editMode = false;
    }

    $scope.cancelEntry = function() {
        $scope.readOnly = true;
    }

    $scope.saveEntry = function() {
        //console.log($scope.selection);
        $http({method: 'POST', url:'rest/materials', data: $scope.selection, headers: {'Content-Type': 'application/json'}})
            .then(function(response) {
                //console.log(response.data);
                $scope.readOnly = true;
            }
        )
    }

    $http({method: 'GET', url: 'rest/vibhags'})
        .then(function(response) {
            $scope.vibhags = response.data;
        }
    )

    $http({method: 'GET', url: 'rest/vehicles'})
        .then(function(response) {
            $scope.vehicles = response.data;
        }
    )

    $http({method: 'GET', url: 'rest/stockItems'})
        .then(function(response) {
            $scope.stocks = response.data;
        }
    )

    $http({method: 'GET', url: 'rest/PrimaryGroups'})
        .then(function(response) {
            $scope.pgs = response.data;
        }
    )

    $scope.timeSelected = function() {
        console.log("Inside timeselected");
        $scope.pagingOptions.currentPage = 1
        $http({method: 'GET', url: 'rest/materials?time=' + $scope.sel.val})
            .then(function(response) {
                $scope.myData = response.data;
                $scope.totalServerItems = $scope.myData.length;
                $scope.setPagingData($scope.myData, $scope.pagingOptions.currentPage, $scope.pagingOptions.pageSize);
            }
        )
    }

    $scope.loadMore = function() {
        var page = $scope.totalServerItems;
        var size = page;
        //console.log("page = " + page + ", size = " + size);
        $http({method: 'GET', url: 'rest/materials?page=' + page + '\&size=' + size + "\&more=true"})
            .then(function(response) {
                //console.log(response.data);
                if (response.data.length > 0) {
                    //console.log("Before: " + $scope.myData);
                    $scope.myData.push.apply($scope.myData, response.data);
                    //console.log("After: " + $scope.myData);
                    $scope.totalServerItems = $scope.myData.length;
                    $scope.setPagingData($scope.myData, $scope.pagingOptions.currentPage, $scope.pagingOptions.pageSize);
                }
            }
        )
    }

    $scope.filterOptions = {
        filterText: "",
        entryType:[1,2],
        useExternalFilter: false
    };

    $scope.pagingOptions = {
        pageSizes: [10, 50, 100],
        pageSize: 10,
        currentPage: 1
    };

    $scope.filterInOut = function(type) {
        console.log(type);
        var index = $scope.filterOptions.entryType.indexOf(type);
        if (index == -1) {
            $scope.filterOptions.entryType.push(type);
        }
        else {
            $scope.filterOptions.entryType.splice(index,1);
        }

    }

    $scope.setPagingData = function(data, page, pageSize){
        //console.log("Entered Paging Data with " + page + "," + pageSize);
        var pagedData = data.slice((page - 1) * pageSize, page * pageSize);
        $scope.myData = pagedData;
        $scope.totalServerItems = data.length;
        //console.log("Total Sever Items = " + data.length);
        if (!$scope.$$phase) {
            $scope.$apply();
        }
    };
    $scope.getPagedDataAsync = function (pageSize, page, searchText) {
        //console.log("Entered Paging Data Async with " + page + "," + pageSize + ", " + searchText);
        setTimeout(function () {
            var data;
            if (searchText) {
                //console.log("searchText = " + searchText);
                var ft = searchText.toLowerCase();
                $http.get('rest/materials?page=' + page + '&size=' + pageSize).success(function (largeLoad) {
                    data = largeLoad.filter(function(item) {
                        return JSON.stringify(item).toLowerCase().indexOf(ft) != -1;
                    });
                    $scope.setPagingData(data,page,pageSize);
                });
            } else {
                //console.log("getPagesDataAsync with pageSize = " + $scope.totalServerItems);
                var size = $scope.totalServerItems;
                //console.log(size);
                if(typeof size == 'undefined') {
                    size = $scope.sel.val;
                }
                $http.get('rest/materials?time=' + $scope.sel.val).success(function(largeLoad) {
                    console.log("there is no searchText");
                    $scope.setPagingData(largeLoad, page, pageSize);
                });
            }
        }, 100);
    };

    $scope.getPagedDataAsync($scope.pagingOptions.pageSize, $scope.pagingOptions.currentPage);

    $scope.$watch('pagingOptions', function (newVal, oldVal) {
        //console.log("Paging Options: newVal.pageSize = " + newVal.pageSize + ", oldVal.pageSize = " + oldVal.pageSize +
        //    ", newVal.currentPage = " + newVal.currentPage + ", oldVal.currentPage = " + oldVal.currentPage);
        if (newVal !== oldVal && (newVal.currentPage !== oldVal.currentPage || newVal.pageSize !== oldVal.pageSize)) {
            $scope.getPagedDataAsync($scope.pagingOptions.pageSize, $scope.pagingOptions.currentPage, $scope.filterOptions.filterText);
        }
    }, true);
    $scope.$watch('filterOptions', function (newVal, oldVal) {
        console.log("Filter Options: newVal.pageSize = " + newVal.pageSize + ", oldVal.pageSize = " + oldVal.pageSize +
            ", newVal.currentPage = " + newVal.currentPage + ", oldVal.currentPage = " + oldVal.currentPage +
            ", newVal.entryType = " + newVal.entryType + ", oldVal.entryType = " + oldVal.entryType);
        if (newVal !== oldVal) {
            $scope.getPagedDataAsync($scope.pagingOptions.pageSize, $scope.pagingOptions.currentPage, $scope.filterOptions.filterText);
        }
    }, true);



    $scope.gridOptions = {
        data: 'myData',
        enablePaging: true,
        showFooter: true,
        enableColumnReordering: true,
        enableColumnResize: true,
        totalServerItems: 'totalServerItems',
        pagingOptions: $scope.pagingOptions,
        filterOptions: $scope.filterOptions,
        jqueryUITheme: true,
        multiSelect: false,
        selectedItems: $scope.selectedRow,
        afterSelectionChange:function() {
            if ($scope.selectedRow != "" ) {
                $scope.disabled = false;
            } else {
                $scope.disabled = true;
            }
        },
        showFilter: true,
        showColumnMenu: true,
        keepLastSelected: false,
        rowTemplate: '<div ng-style="{\'cursor\': row.cursor, \'z-index\': col.zIndex() }" ng-repeat="col in renderedColumns" ng-class="col.colIndex()" class="ngCell {{col.cellClass}}" ng-cell ng-click="selectRow()"></div>',
        columnDefs: [{field:'entryTypeText', displayName:'Type', width: '70px'},
            {field:'challanNo', displayName:'Challan', width: '70px'},
            {field:'vendorName', displayName:'Vendor', width: '160px'},
            {field:'stockName', displayName:'Stock', width: '160px'},
            {field:'transportName', displayName:'Transport', width: '90px', visible: false},
            {field:'vehicleNumber', displayName:'Vehicle', width: '130px'},
            {field:'vehicleInTime', displayName:'Vehicle In Time', cellFilter: 'date:\"MM/dd/yyyy @ h:mma\"', width: '220px'},
            {field:'vehicleOutTime', displayName:'Vehicle Out Time', cellFilter: 'date:\"MM/dd/yyyy @ h:mma\"', width: '220px', visible:false},
            {field:'grossWt', displayName:'GrossWt', width: '90px'},
            {field:'netWt', displayName:'NetWt', width: '90px'},
            {field:'tareWt', displayName:'TareWt', width: '90px'},
            {field:'vibhagName', displayName:'Vibhag', width: '130px', visible: false},
            {field:'orderId', displayName:'Order ID', width: '90px', visible: false}
            ]
    };

})





myApp.config(["$routeProvider", function($routeProvider) {
        $routeProvider
            .when("/Home", {
                controller: "ViewCtrl",
                templateUrl: "resources/home.html"
            })
            .when("/Materials", {
                templateUrl: "resources/materials.html",
                controller: "MaterialsCtrl"
            })
            .when("/EditMaterials", {
                templateUrl: "resources/editmaterial.html",
                controller: "MaterialsCtrl"
            })
            .when("/Reports", {
                templateUrl: "resources/reports.html",
                controller: "ReportsCtrl"
            })
            .when("/Setup", {
                templateUrl: "resources/setup.html",
                controller: "SetupCtrl"
            })
            .otherwise( {
                redirectTo: "/Home"
            }
        );
    }])

myApp.controller("ReportsCtrl", function($scope, $http) {
    $http({method: 'GET', url: 'rest/reports'})
        .then(function(response) {
            $scope.reports = response.data;
        }
    )
})

myApp.controller("SetupCtrl", function($scope) {

})

myApp.controller("ViewCtrl", function($scope, $http, $location, $rootScope) {
    $http.get('rest/tabs')
        .then(function(response) {
            $scope.tabs = response.data;
        }
    )

    $http({method: 'GET', url: 'rest/login'})
        .then(function(response) {
            $rootScope.loginuser = response.data.user;
           // console.log($rootScope.loginuser.firstName);
        }
    )

    $scope.tabClass = "nav navbar-nav nav-tabs";

    $scope.loadTab = function(order) {
        console.log($scope.tabs[order].tabName);
    }

    $scope.isTabActive = function(route) {
        return route === $location.path();
    }

})
